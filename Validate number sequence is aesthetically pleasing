/**
Write a function 
  class Solution { public int solution(int[] A); }
that given an array A consisting of N integers, where A[K] denotes the height of the K-th tree, returns the minimum number of trees 
that should be shortened so that the garden looks aesthetically pleasing. 
**/

public class Solution {
    public static void main(String[] args){
        Solution sol = new Solution();
        int[] treeSequence = {5,3,4,2,6,1};
        System.out.println("for {5,3,4,2,6,1} =" + sol.solution(treeSequence));
        
        int[] treeSequence2 = {1,3,2,5,4,6};
        System.out.println("for {1,3,2,5,4,6} =" + sol.solution(treeSequence2));
        
        int[] treeSequence3 = {1,3,2,5,7,6};
        System.out.println("for {1,3,2,5,7,6} =" + sol.solution(treeSequence3));
        
        int[] treeSequence4 = {1,3,2,2,7,6};
        System.out.println("for {1,3,2,2,7,6} =" + sol.solution(treeSequence3));
    }
    
    public int solution(int[] A){
        /** eg. [1,3,2,5,4,6], [5,3,4,2,6,1]
         * so A[i+i] - A[i] is always {+,-,+,-,+} or {-,+,-,+,-}
         * Mapping + -> 0 and - -> 1
         **/
         int[] signHolder = new int[A.length - 1];
         for(int i=0; i<A.length-1; i++){
             //Cannot accept two adjacent heights in the sequence
            if(A[i+1] == A[i]){
                return 1;
            }
            signHolder[i] = (A[i+1] - A[i]) > 0 ? 0 : 1;
         }

        /**
         * Then, if trees sequence is aesthetically pleasing, new signHolder array should not have any adjacent 1s or 0s.
         **/
        int checkAdjacentValues = -1;
        for(int i=0; i<signHolder.length - 1; i++ ){
           if(signHolder[i] == signHolder[i+1]){
               return 1;
           }
        }
        
        return 0;
    }
}
